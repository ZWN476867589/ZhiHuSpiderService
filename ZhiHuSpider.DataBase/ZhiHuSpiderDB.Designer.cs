//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2015/12/3 9:54:05
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertSysDict(SysDict instance);
        partial void UpdateSysDict(SysDict instance);
        partial void DeleteSysDict(SysDict instance);
        partial void InsertQuestionInfo(QuestionInfo instance);
        partial void UpdateQuestionInfo(QuestionInfo instance);
        partial void DeleteQuestionInfo(QuestionInfo instance);
        partial void InsertCollectionInfo(CollectionInfo instance);
        partial void UpdateCollectionInfo(CollectionInfo instance);
        partial void DeleteCollectionInfo(CollectionInfo instance);
        partial void InsertCollectionQuestionAndAnswer(CollectionQuestionAndAnswer instance);
        partial void UpdateCollectionQuestionAndAnswer(CollectionQuestionAndAnswer instance);
        partial void DeleteCollectionQuestionAndAnswer(CollectionQuestionAndAnswer instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<SysDict> SysDicts
        {
            get
            {
                return this.GetTable<SysDict>();
            }
        }

        public Devart.Data.Linq.Table<QuestionInfo> QuestionInfos
        {
            get
            {
                return this.GetTable<QuestionInfo>();
            }
        }

        public Devart.Data.Linq.Table<CollectionInfo> CollectionInfos
        {
            get
            {
                return this.GetTable<CollectionInfo>();
            }
        }

        public Devart.Data.Linq.Table<CollectionQuestionAndAnswer> CollectionQuestionAndAnswers
        {
            get
            {
                return this.GetTable<CollectionQuestionAndAnswer>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.SysDict in the schema.
    /// </summary>
    [Table(Name = @"""main"".SysDict")]
    public partial class SysDict : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;

        private string _DictName;

        private string _DictValue;

        private string _Remark;

        private string _DictCode;

        private string _ModefyDate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnDictNameChanging(string value);
        partial void OnDictNameChanged();
        partial void OnDictValueChanging(string value);
        partial void OnDictValueChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnDictCodeChanging(string value);
        partial void OnDictCodeChanged();
        partial void OnModefyDateChanging(string value);
        partial void OnModefyDateChanged();
        #endregion

        public SysDict()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }

    
        /// <summary>
        /// There are no comments for DictName in the schema.
        /// </summary>
        [Column(Storage = "_DictName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DictName
        {
            get
            {
                return this._DictName;
            }
            set
            {
                if (this._DictName != value)
                {
                    this.OnDictNameChanging(value);
                    this.SendPropertyChanging();
                    this._DictName = value;
                    this.SendPropertyChanged("DictName");
                    this.OnDictNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DictValue in the schema.
        /// </summary>
        [Column(Storage = "_DictValue", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DictValue
        {
            get
            {
                return this._DictValue;
            }
            set
            {
                if (this._DictValue != value)
                {
                    this.OnDictValueChanging(value);
                    this.SendPropertyChanging();
                    this._DictValue = value;
                    this.SendPropertyChanged("DictValue");
                    this.OnDictValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging();
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DictCode in the schema.
        /// </summary>
        [Column(Storage = "_DictCode", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DictCode
        {
            get
            {
                return this._DictCode;
            }
            set
            {
                if (this._DictCode != value)
                {
                    this.OnDictCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DictCode = value;
                    this.SendPropertyChanged("DictCode");
                    this.OnDictCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefyDate in the schema.
        /// </summary>
        [Column(Storage = "_ModefyDate", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ModefyDate
        {
            get
            {
                return this._ModefyDate;
            }
            set
            {
                if (this._ModefyDate != value)
                {
                    this.OnModefyDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModefyDate = value;
                    this.SendPropertyChanged("ModefyDate");
                    this.OnModefyDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.QuestionInfo in the schema.
    /// </summary>
    [Table(Name = @"""main"".QuestionInfo")]
    public partial class QuestionInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;

        private long _QuestionID;

        private string _QuestionTitle;

        private string _QuestionUrl;

        private string _QuestionDetail;

        private System.Nullable<long> _QuestionTimeStamp;

        private string _BelongsTopic;

        private string _ModefiedTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnQuestionIDChanging(long value);
        partial void OnQuestionIDChanged();
        partial void OnQuestionTitleChanging(string value);
        partial void OnQuestionTitleChanged();
        partial void OnQuestionUrlChanging(string value);
        partial void OnQuestionUrlChanged();
        partial void OnQuestionDetailChanging(string value);
        partial void OnQuestionDetailChanged();
        partial void OnQuestionTimeStampChanging(System.Nullable<long> value);
        partial void OnQuestionTimeStampChanged();
        partial void OnBelongsTopicChanging(string value);
        partial void OnBelongsTopicChanged();
        partial void OnModefiedTimeChanging(string value);
        partial void OnModefiedTimeChanged();
        #endregion

        public QuestionInfo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionID in the schema.
        /// </summary>
        [Column(Storage = "_QuestionID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long QuestionID
        {
            get
            {
                return this._QuestionID;
            }
            set
            {
                if (this._QuestionID != value)
                {
                    this.OnQuestionIDChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionID = value;
                    this.SendPropertyChanged("QuestionID");
                    this.OnQuestionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionTitle in the schema.
        /// </summary>
        [Column(Storage = "_QuestionTitle", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string QuestionTitle
        {
            get
            {
                return this._QuestionTitle;
            }
            set
            {
                if (this._QuestionTitle != value)
                {
                    this.OnQuestionTitleChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionTitle = value;
                    this.SendPropertyChanged("QuestionTitle");
                    this.OnQuestionTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionUrl in the schema.
        /// </summary>
        [Column(Storage = "_QuestionUrl", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string QuestionUrl
        {
            get
            {
                return this._QuestionUrl;
            }
            set
            {
                if (this._QuestionUrl != value)
                {
                    this.OnQuestionUrlChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionUrl = value;
                    this.SendPropertyChanged("QuestionUrl");
                    this.OnQuestionUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionDetail in the schema.
        /// </summary>
        [Column(Storage = "_QuestionDetail", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string QuestionDetail
        {
            get
            {
                return this._QuestionDetail;
            }
            set
            {
                if (this._QuestionDetail != value)
                {
                    this.OnQuestionDetailChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionDetail = value;
                    this.SendPropertyChanged("QuestionDetail");
                    this.OnQuestionDetailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionTimeStamp in the schema.
        /// </summary>
        [Column(Storage = "_QuestionTimeStamp", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> QuestionTimeStamp
        {
            get
            {
                return this._QuestionTimeStamp;
            }
            set
            {
                if (this._QuestionTimeStamp != value)
                {
                    this.OnQuestionTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionTimeStamp = value;
                    this.SendPropertyChanged("QuestionTimeStamp");
                    this.OnQuestionTimeStampChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BelongsTopic in the schema.
        /// </summary>
        [Column(Storage = "_BelongsTopic", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string BelongsTopic
        {
            get
            {
                return this._BelongsTopic;
            }
            set
            {
                if (this._BelongsTopic != value)
                {
                    this.OnBelongsTopicChanging(value);
                    this.SendPropertyChanging();
                    this._BelongsTopic = value;
                    this.SendPropertyChanged("BelongsTopic");
                    this.OnBelongsTopicChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefiedTime in the schema.
        /// </summary>
        [Column(Storage = "_ModefiedTime", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ModefiedTime
        {
            get
            {
                return this._ModefiedTime;
            }
            set
            {
                if (this._ModefiedTime != value)
                {
                    this.OnModefiedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ModefiedTime = value;
                    this.SendPropertyChanged("ModefiedTime");
                    this.OnModefiedTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.CollectionInfo in the schema.
    /// </summary>
    [Table(Name = @"""main"".CollectionInfo")]
    public partial class CollectionInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;

        private long _CollectionID;

        private string _CollectionName;

        private string _CollectionUrl;

        private long _FllowersCount = 0;

        private System.Nullable<long> _QuestionCount = 0;

        private string _CreatorName;

        private string _CreatorHash;

        private string _ModefiedTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnCollectionIDChanging(long value);
        partial void OnCollectionIDChanged();
        partial void OnCollectionNameChanging(string value);
        partial void OnCollectionNameChanged();
        partial void OnCollectionUrlChanging(string value);
        partial void OnCollectionUrlChanged();
        partial void OnFllowersCountChanging(long value);
        partial void OnFllowersCountChanged();
        partial void OnQuestionCountChanging(System.Nullable<long> value);
        partial void OnQuestionCountChanged();
        partial void OnCreatorNameChanging(string value);
        partial void OnCreatorNameChanged();
        partial void OnCreatorHashChanging(string value);
        partial void OnCreatorHashChanged();
        partial void OnModefiedTimeChanging(string value);
        partial void OnModefiedTimeChanged();
        #endregion

        public CollectionInfo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }

    
        /// <summary>
        /// There are no comments for CollectionID in the schema.
        /// </summary>
        [Column(Storage = "_CollectionID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long CollectionID
        {
            get
            {
                return this._CollectionID;
            }
            set
            {
                if (this._CollectionID != value)
                {
                    this.OnCollectionIDChanging(value);
                    this.SendPropertyChanging();
                    this._CollectionID = value;
                    this.SendPropertyChanged("CollectionID");
                    this.OnCollectionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CollectionName in the schema.
        /// </summary>
        [Column(Storage = "_CollectionName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CollectionName
        {
            get
            {
                return this._CollectionName;
            }
            set
            {
                if (this._CollectionName != value)
                {
                    this.OnCollectionNameChanging(value);
                    this.SendPropertyChanging();
                    this._CollectionName = value;
                    this.SendPropertyChanged("CollectionName");
                    this.OnCollectionNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CollectionUrl in the schema.
        /// </summary>
        [Column(Storage = "_CollectionUrl", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CollectionUrl
        {
            get
            {
                return this._CollectionUrl;
            }
            set
            {
                if (this._CollectionUrl != value)
                {
                    this.OnCollectionUrlChanging(value);
                    this.SendPropertyChanging();
                    this._CollectionUrl = value;
                    this.SendPropertyChanged("CollectionUrl");
                    this.OnCollectionUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FllowersCount in the schema.
        /// </summary>
        [Column(Storage = "_FllowersCount", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long FllowersCount
        {
            get
            {
                return this._FllowersCount;
            }
            set
            {
                if (this._FllowersCount != value)
                {
                    this.OnFllowersCountChanging(value);
                    this.SendPropertyChanging();
                    this._FllowersCount = value;
                    this.SendPropertyChanged("FllowersCount");
                    this.OnFllowersCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionCount in the schema.
        /// </summary>
        [Column(Storage = "_QuestionCount", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> QuestionCount
        {
            get
            {
                return this._QuestionCount;
            }
            set
            {
                if (this._QuestionCount != value)
                {
                    this.OnQuestionCountChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionCount = value;
                    this.SendPropertyChanged("QuestionCount");
                    this.OnQuestionCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatorName in the schema.
        /// </summary>
        [Column(Storage = "_CreatorName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CreatorName
        {
            get
            {
                return this._CreatorName;
            }
            set
            {
                if (this._CreatorName != value)
                {
                    this.OnCreatorNameChanging(value);
                    this.SendPropertyChanging();
                    this._CreatorName = value;
                    this.SendPropertyChanged("CreatorName");
                    this.OnCreatorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatorHash in the schema.
        /// </summary>
        [Column(Storage = "_CreatorHash", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CreatorHash
        {
            get
            {
                return this._CreatorHash;
            }
            set
            {
                if (this._CreatorHash != value)
                {
                    this.OnCreatorHashChanging(value);
                    this.SendPropertyChanging();
                    this._CreatorHash = value;
                    this.SendPropertyChanged("CreatorHash");
                    this.OnCreatorHashChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefiedTime in the schema.
        /// </summary>
        [Column(Storage = "_ModefiedTime", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ModefiedTime
        {
            get
            {
                return this._ModefiedTime;
            }
            set
            {
                if (this._ModefiedTime != value)
                {
                    this.OnModefiedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ModefiedTime = value;
                    this.SendPropertyChanged("ModefiedTime");
                    this.OnModefiedTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.CollectionQuestionAndAnswer in the schema.
    /// </summary>
    [Table(Name = @"""main"".CollectionQuestionAndAnswer")]
    public partial class CollectionQuestionAndAnswer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;

        private long _CollectionID;

        private long _QuestionID;

        private long _AnswerID;

        private string _ModefiedTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnCollectionIDChanging(long value);
        partial void OnCollectionIDChanged();
        partial void OnQuestionIDChanging(long value);
        partial void OnQuestionIDChanged();
        partial void OnAnswerIDChanging(long value);
        partial void OnAnswerIDChanged();
        partial void OnModefiedTimeChanging(string value);
        partial void OnModefiedTimeChanged();
        #endregion

        public CollectionQuestionAndAnswer()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }

    
        /// <summary>
        /// There are no comments for CollectionID in the schema.
        /// </summary>
        [Column(Storage = "_CollectionID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long CollectionID
        {
            get
            {
                return this._CollectionID;
            }
            set
            {
                if (this._CollectionID != value)
                {
                    this.OnCollectionIDChanging(value);
                    this.SendPropertyChanging();
                    this._CollectionID = value;
                    this.SendPropertyChanged("CollectionID");
                    this.OnCollectionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuestionID in the schema.
        /// </summary>
        [Column(Storage = "_QuestionID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long QuestionID
        {
            get
            {
                return this._QuestionID;
            }
            set
            {
                if (this._QuestionID != value)
                {
                    this.OnQuestionIDChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionID = value;
                    this.SendPropertyChanged("QuestionID");
                    this.OnQuestionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnswerID in the schema.
        /// </summary>
        [Column(Storage = "_AnswerID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long AnswerID
        {
            get
            {
                return this._AnswerID;
            }
            set
            {
                if (this._AnswerID != value)
                {
                    this.OnAnswerIDChanging(value);
                    this.SendPropertyChanging();
                    this._AnswerID = value;
                    this.SendPropertyChanged("AnswerID");
                    this.OnAnswerIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefiedTime in the schema.
        /// </summary>
        [Column(Storage = "_ModefiedTime", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ModefiedTime
        {
            get
            {
                return this._ModefiedTime;
            }
            set
            {
                if (this._ModefiedTime != value)
                {
                    this.OnModefiedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ModefiedTime = value;
                    this.SendPropertyChanged("ModefiedTime");
                    this.OnModefiedTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
